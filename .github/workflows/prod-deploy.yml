# github repository Actions 페이지에 나타낼 이름
name: prod deploy

# event trigger
on:
  push:
    branches:
      - main

jobs:
  production-cd:
    runs-on: ubuntu-22.04 # 필수, 실행환경 지정
    steps:

      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## (3) application-prod.properties 생성
      - name: make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./application-prod.yml
        shell: bash

      # (4) ./gradlew 권한 설정
      - name: ./gradlew 권한 설정
        run: chmod +x ./gradlew

      # (5) Gradle build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # (6) docker build & push to production
      - name: Docker build & push to DockerHub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}:latest-prod .
          docker push ${{ secrets.DOCKER_REPO }}:latest-prod

      # (7) aws 세팅
      - name: aws 세팅
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # (8) code deploy
      - name: code deploy
        run: |
          aws deploy create-deployment -—application-name snack-exercise-code-deploy -—deployment-config-name CodeDeployDefault.AllAtOnce -—deployment-group-name snack-exercise-bg-deploy-group --github-location repository=${{ github.repository }},commitId=${{ github.sha }}

